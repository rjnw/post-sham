#lang racket

(require "core.rkt"
         (submod "core.rkt" metadata)
         (prefix-in wf- "wf.rkt"))

(module* signature #f
  (provide (except-out (all-defined-out) sig-md))
  (define (sig-md) (metadata:ast:signature:signature #f))
  (define (kind s [md #f])
    (unless (wf-deep-signature? s)
      (error))
    (wf-mark-deep-wf-sig! (ast:signature:kind md s)))
  (define (symbol [md #f]) (ast:signature:symbol md))
  (define (string [md #f]) (ast:signature:string md))
  (define (integer) (ast:signature:integer #f))
  (define (list of [md #f])
    (unless (wf-deep-signature? of)
      (error 'post:signature:wf "signature for list element not well formed" of))
    (wf-mark-deep-wf-sig! (ast:signature:list md of)))
  (define (cons a d [md #f])
    (unless (and (wf-deep-signature? a)
                 (wf-deep-signature? d))
      (error 'post:signature:wf "signature for cons elements not well formed" a d))
    (wf-mark-deep-wf-sig! (ast:signature:cons md a d)))
  (define (record name decls [md #f])
    (unless (and (andmap wf-deep-decl? decls)
                 (symbol? name))
      (error 'post:signature:wf "signature for record fields not well formed" name decls))
    (wf-mark-deep-wf-sig! (ast:signature:record md name decls)))
  (define (module name defs [md #f])
    (unless (and (andmap wf-deep-decl? defs)
                 (symbol? name))
      (error 'post:signature:wf "signature for module fields not well formed" name defs))
    (wf-mark-deep-wf-sig! (ast:signature:module md name defs)))
  (define (functor name args ret [md #f])
    (unless (and (symbol? name)
                 (andmap wf-deep-decl? args)
                 (wf-signature? ret))
      (error 'post:signature:wf "signature for functor input or return not well formed" name args ret))
    (wf-mark-deep-wf-sig! (ast:signature:functor md name args ret))))
