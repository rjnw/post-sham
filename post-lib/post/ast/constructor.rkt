#lang racket

(require "core.rkt"
         "metadata.rkt"
         (prefix-in wf- "wf.rkt")
         "pp.rkt")

(module* signature #f
  (provide (except-out (all-defined-out)))
  (define (type n s [md #f])
    (unless (wf-deep-signature? s)
      (error 'post:signature:wf "signature for type base not well formed. base: ~a" s))
    (wf-mark-deep-wf-sig! (ast:signature:type md n s)))
  (define (lit sham check coerce #:md [md #f])
    (ast:signature:lit md sham check coerce))
  (define (rkt check coerce #:md [md #f])
    (ast:signature:rkt md check coerce))
  (define (function args ret #:md [md #f])
    (unless (and (andmap wf-deep-decl? args)
                 (wf-deep-signature? ret))
      (error 'post:signature:wf "signature for function args or ret not well formed. args: ~a, ret: ~a" args ret))
    (wf-mark-deep-wf-sig! (ast:signature:function md args ret)))
  (define (union subtypes #:md [md #f])
    (ast:signature:union md subtypes))
  (define (datatype args #:md [md #f])
    (ast:signature:datatype md  args))
  (define (record decls #:md [md #f])
    (unless (andmap wf-deep-decl? decls)
      (error 'post:signature:wf "signature for record fields not well formed. decls: ~a" decls))
    (wf-mark-deep-wf-sig! (ast:signature:record md decls)))
  (define (forall binds type #:md [md #f])
    (ast:signature:forall md binds type))

  (define (md:record name)
    (metadata:ast:signature:record name))
  (define (md:forall (memo (make-hash)))
    (metadata:ast:signature:forall memo)))

;; todo perform checks
(module* expr #f
  (require (prefix-in sig: (submod ".." signature))
           (prefix-in app-builder- "app-builder.rkt"))
  (provide (all-defined-out))
  (define (function name sig bodyb [appb app-builder-generic-function] #:md [md #f])
    (ast:expr:function name sig md bodyb appb))
  (define (record name sig defb [appb app-builder-generic-record] #:md [md #f])
    (ast:expr:record name sig md defb appb))
  (define (union sig subtype args #:md [md #f])
    (ast:expr:union md sig subtype args))
  (define (let sig vars vals body #:md [md #f])
    (ast:expr:let md sig vars vals body))
  (define (mref sig mod decl #:md [md #f])
    (ast:expr:mref md sig mod decl))
  (define (lit sig value #:md [md #f])
    (ast:expr:lit md sig value))
  (define (app sig rator rands #:md [md #f])
    (ast:expr:app md sig rator rands))
  (define (case sig test branches #:md [md #f])
    (ast:expr:case md sig test branches)))
